 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/backend/index.js b/backend/index.js
index 7c5b8aad638b6af3440b72652948e4e758a6c7c0..dded3a9f05738e067a797f800ff19c0b4c71c956 100644
--- a/backend/index.js
+++ b/backend/index.js
@@ -101,59 +101,76 @@ app.get('/api/barang', (req, res) => {
       return res.status(500).json({ success: false, message: 'Kesalahan server' });
     }
     const data = rows.map(item => {
       return {
         ...item,
         variations: item.variasi ? JSON.parse(item.variasi) : [] // pastikan key variabel bernama variations
       };
     });
     res.json(data);
   });
 });
 
 // API dapatkan semua penjualan
 app.get('/api/penjualan', (req, res) => {
   db.all('SELECT * FROM penjualan', [], (err, rows) => {
     if (err) {
       console.error('Error ambil data penjualan:', err.message);
       return res.status(500).json({ success: false, message: 'Kesalahan server' });
     }
     res.json(rows);
   });
 });
 
 // API tambah data penjualan sederhana
 app.post('/api/penjualan', (req, res) => {
-  const { tanggal, total } = req.body;
-  if(!tanggal || total === undefined){
+  const { tanggal, total, items } = req.body;
+  if(!tanggal || total === undefined || !Array.isArray(items)){
     return res.status(400).json({ success:false, message:'Field penjualan tidak lengkap' });
   }
   db.run('INSERT INTO penjualan(tanggal,total) VALUES(?,?)', [tanggal, total], function(err){
     if(err){
       console.error('Error tambah penjualan:', err.message);
       return res.status(500).json({ success:false, message:'Gagal menambah penjualan' });
     }
+    // update stok barang
+    items.forEach(it => {
+      db.get('SELECT * FROM barang WHERE id=?', [it.id], (err2, row) => {
+        if(err2 || !row) return;
+        let stok = row.stok || 0;
+        let variations = [];
+        if(row.variasi){
+          try{ variations = JSON.parse(row.variasi); }catch(e){ variations = []; }
+        }
+        if(variations.length > 0 && it.varIndex !== undefined && variations[it.varIndex]){
+          variations[it.varIndex].stok = Math.max(0, (variations[it.varIndex].stok || 0) - it.qty);
+        } else {
+          stok = Math.max(0, stok - it.qty);
+        }
+        db.run('UPDATE barang SET stok=?, variasi=? WHERE id=?', [stok, JSON.stringify(variations), it.id]);
+      });
+    });
     res.json({ success:true, id:this.lastID });
   });
 });
 
 // API tambah barang baru
 app.post('/api/barang', (req, res) => {
   const { namaBarang, kodeBarang, hargaBeli, hargaJual, stok, variasi } = req.body;
 
   if(!namaBarang || !kodeBarang || hargaBeli === undefined || hargaJual === undefined){
     return res.status(400).json({ success: false, message: 'Field wajib belum lengkap' });
   }
 
   const variasiStr = JSON.stringify(variasi || []);
 
   db.run(
     `INSERT INTO barang (namaBarang, kodeBarang, hargaBeli, hargaJual, stok, variasi)
      VALUES (?, ?, ?, ?, ?, ?)`,
     [namaBarang, kodeBarang, hargaBeli, hargaJual, stok || 0, variasiStr],
     function(err) {
       if (err) {
         console.error('Error tambah barang:', err.message);
         return res.status(500).json({ success: false, message: 'Gagal menambah data barang', detail: err.message });
       }
       res.json({ success: true, id: this.lastID });
     }
 
EOF
)